@startuml container_diagram
!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Container.puml

title Gomoku Game - Container Diagram

Person(player1, "Player 1", "玩家1 - 黑子先手")
Person(player2, "Player 2", "玩家2 - 白子後手")

System_Boundary(gomoku_system, "Gomoku Game System") {
    Container(web_app, "Web Application", "HTML5, CSS3, JavaScript", "提供五子棋遊戲的用戶界面\n• Canvas棋盤渲染\n• 用戶交互處理\n• 遊戲狀態顯示")
    
    Container(api_server, "API Server", "FastAPI, Python", "提供遊戲邏輯的RESTful API\n• 遊戲狀態管理\n• 落子驗證\n• 勝負判斷")
    
    Container(game_engine, "Game Engine", "Python", "五子棋遊戲核心邏輯\n• 棋盤狀態管理\n• 勝負判斷算法\n• 遊戲規則驗證")
    
    ContainerDb(memory_store, "Memory Store", "In-Memory", "存儲遊戲狀態\n• 棋盤數據\n• 遊戲進度\n• 玩家信息")
}

System_Ext(web_browser, "Web Browser", "網頁瀏覽器\n用戶訪問遊戲界面")

Rel(player1, web_browser, "使用", "點擊棋盤落子")
Rel(player2, web_browser, "使用", "點擊棋盤落子")
Rel(web_browser, web_app, "載入", "HTTPS")
Rel(web_app, api_server, "調用", "HTTP/JSON API\n遊戲操作請求")
Rel(api_server, game_engine, "使用", "Python函數調用\n遊戲邏輯處理")
Rel(api_server, memory_store, "讀寫", "內存操作\n遊戲狀態存取")

note right of web_app
  **前端容器功能:**
  • HTML5 Canvas棋盤渲染
  • 用戶點擊事件處理
  • 遊戲狀態實時顯示
  • 控制按鈕界面
  • Fetch API通信
end note

note left of api_server
  **API服務器功能:**
  • POST /api/game/start
  • GET /api/game/{game_id}
  • POST /api/game/{game_id}/move
  • POST /api/game/{game_id}/reset
  • JSON數據交換
end note

note bottom of game_engine
  **遊戲引擎功能:**
  • 15x15棋盤邏輯
  • 五子連珠判斷
  • 輪流落子控制
  • 遊戲狀態轉換
end note

@enduml